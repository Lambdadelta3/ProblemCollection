class Solution {
public:
    
    
    
    
    int unitLife(vector<vector<int>>& board, int x, int y)
    {
        
        int neighbors = 0;
        
        if(x > 0)
        {
            neighbors += board[x-1][y];
            if(y>0)
                neighbors += board[x-1][y-1];
            if(y < board[x].size()-1)
                neighbors += board[x-1][y+1];
        }
        if(y > 0)
            neighbors += board[x][y-1];
        
        if(y < board[x].size()-1)
            neighbors += board[x][y+1];
        
        if(x < board.size()-1 )
        {
            neighbors += board[x+1][y];
            if(y > 0)
                neighbors += board[x+1][y-1];
            if(y < board[x].size()-1)
                neighbors += board[x+1][y+1];
        }
        
        
        
        
        if(board[x][y] == 0 && neighbors == 3)
            return 1;

        if(board[x][y] == 1)
            if(neighbors < 2 || neighbors > 3)
                return 0;
            else
                return 1;

        
        return 0;
    }
    
    
    
    
    void gameOfLife(vector<vector<int>>& board) {
        
        int boardStep[board.size()][board[0].size()];
        
        for(int i=0; i<board.size(); i++)
        {
            for(int j=0; j<board[0].size(); j++)
            {
                boardStep[i][j] = unitLife(board, i, j);
            }
        }
        
        for(int i=0; i<board.size(); i++)
        {
            for(int j=0; j<board[0].size(); j++)
            {
                board[i][j] = boardStep[i][j] ;
            }
        }
        
        
    }
};